# Functions
#
# Some people use a different file for functions
# if [ -f "${HOME}/.bash_functions" ]; then
#   source "${HOME}/.bash_functions"
# fi
#
# Some example functions:
#
# a) function settitle
settitle ()
{
  echo -ne "\e]2;$@\a\e]1;$@\a";
}

# b) function cd_func
# This function defines a 'cd' replacement function capable of keeping,
# displaying and accessing history of visited directories, up to 10 entries.
# To use it, uncomment it, source this file and try 'cd --'.
# acd_func 1.0.5, 10-nov-2004
# Petar Marinov, http:/geocities.com/h2428, this is public domain
cd_func ()
{
  local x2 the_new_dir adir index
  local -i cnt

  if [[ $1 ==  "--" ]]; then
    dirs -v
    return 0
  fi

  the_new_dir=$1
  [[ -z $1 ]] && the_new_dir=$HOME

  if [[ ${the_new_dir:0:1} == '-' ]]; then
    #
    # Extract dir N from dirs
    index=${the_new_dir:1}
    [[ -z $index ]] && index=1
    adir=$(dirs +$index)
    [[ -z $adir ]] && return 1
    the_new_dir=$adir
  fi

  #
  # '~' has to be substituted by ${HOME}
  [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"

  #
  # Now change to the new dir and add to the top of the stack
  pushd "${the_new_dir}" > /dev/null
  [[ $? -ne 0 ]] && return 1
  the_new_dir=$(pwd)

  #
  # Trim down everything beyond 11th entry
  popd -n +11 2>/dev/null 1>/dev/null

  #
  # Remove any other occurence of this dir, skipping the top of the stack
  for ((cnt=1; cnt <= 10; cnt++)); do
    x2=$(dirs +${cnt} 2>/dev/null)
    [[ $? -ne 0 ]] && return 0
    [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
    if [[ "${x2}" == "${the_new_dir}" ]]; then
      popd -n +$cnt 2>/dev/null 1>/dev/null
      cnt=cnt-1
    fi
  done

  return 0
}

alias cd=cd_func

# unzip or untar files
extract () {
    filename=$(basename -- "$1")
    extension="${filename##*.}"
    filename="${filename%.*}"
    echo ${filename}
    if [ -f $1 ] ; then
	case $1 in
            *.tar.bz2)   tar xvjf $1  -C ${filename}   ;;
            *.tar.gz)    tar xvzf $1  -C ${filename}   ;;
            *.bz2)       bunzip2 -v $1      ;;
            *.rar)       unrar x $1 ${filename}     ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1    -C ${filename}  ;;
            *.tbz2)      tar xvjf $1   -C ${filename}  ;;
            *.tgz)       tar xvzf $1   -C ${filename}  ;;
            *.zip)       unzip $1      -d ${filename}  ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "don't know how to extract '$1'..." ;;
	esac
    else
	echo "'$1' is not a valid file!"
    fi
}

del () {
    for i in $(find . -name $1); do
	echo $i;
	rm -rf $i;
    done
}


grep_all () {
    for i in $(find . -name $2); do 
	echo $i;
	grep $1 $i;
    done
}


compress () {
    tar cvzf "${1////}".tar.gz $1
    
}


# MongoDB
export ${parameter:-word}
export MONGO_PORT=${MONGO_PORT:-'27017'}
export MONGO_PATH=${MONGO_PATH:-'/data/db'}
export MONGO_LOG_PATH=${MONGO_LOG_PATH:-'$HOME/'}

alias start_mongodb='mongod --port ${MONGO_PORT} --dbpath ${MONGO_PATH} > ${MONGO_LOG_PATH}/$(date +'%Y%m%d-')$(hostname).log &'
alias stop_mongodb='mongod  --port ${MONGO_PORT} --dbpath ${MONGO_PATH} --shutdown'


drop () {
    mongo --port ${MONGO_PORT} $1 --eval "printjson(db.dropDatabase())"
}

function show_dbs () {
    mongo --port ${MONGO_PORT} --quiet --eval "db.getMongo().getDBNames().forEach(function (n) { var s = db.getMongo().getDB(n).stats(1024*1024*1024); print(s['db']+' : '+ Math.round(s['storageSize'])+ 'GB')})"
}


if [ -f /etc/bashrc ]; then
        . /etc/bashrc
fi



# how many leveles go up cd ../../../
up(){
  local d=""
  limit=$1
  for ((i=1 ; i <= limit ; i++))
    do
      d=$d/..
    done
  d=$(echo $d | sed 's/^\///')
  if [ -z "$d" ]; then
    d=..
  fi
  cd $d
}



# github
if [ -f ~/.git-completion.bash ]; then
    . ~/.git-completion.bash
fi



gp ()
{
    git add .
    git commit -m "$1"
    git push
}
